class Solution {
    public int solution(int h1, int m1, int s1, int h2, int m2, int s2) {
        int sec1 = h1 * 3600 + m1 * 60 + s1; // 0시 0분 0초 ~ h1시 m1분 s1초
        int sec2 = h2 * 3600 + m2 * 60 + s2; // 0시 0분 0초 ~ h2시 m2분 s2초
        
        int answer = count(sec2) - count(sec1);
        
        // 뺄셈으로 빠져버린 현재 시간을 계산해주기 (시작 시간에 울리는지)
        // 분침: 3600/59초 마다 만남 -> s*59가 3600의 배수가 되면 딱 정시에 만난다는 뜻(나머지 없으니까)
        // 시침도 비슷
        if(sec1 * 59 % 3600 == 0 || sec1 * 719 % 43200 == 0) {
            answer++;
        }
        return answer;
    }
    
    // 0시 0분 0초에서 sec만큼 흐를 동안 몇 번 만나는지 계산
    public int count(int sec) {
        // 분침이 한바퀴(3600s) 돌면, 초침과 59번 만남
        // 분침도 이동하므로 조금씩 오차 발생 : 59->0분으로 넘어가는 순간 초침과 안만남
        // 즉, 1초에 59/3600번 만남
        int cnt = sec * 59 / 3600;
        
        // 시침이 한바퀴(43200s) 돌면, 초침과 719번 만남
        // 비슷하게 오차 발생: 11시 59분 -> 12시 00분으로 넘어가는 순간 안만남 (60 * 12 - 1)
        // 즉, 1초에 719/43200번 만남
        cnt += sec * 719 / 43200;
        
        // 0시, 12시 고려 (시분침 모두 만남) : 0시는 모든 경우에 포함됨
        cnt -= (43200 <= sec) ? 2 : 1;
        return cnt;
    }
}